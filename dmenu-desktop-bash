#!/bin/env bash

##################################################################################
# MIT License                                                                    #
#                                                                                #
# Copyright (c) 2025 technicfan                                                  #
#                                                                                #
# Permission is hereby granted, free of charge, to any person obtaining a copy   #
# of this software and associated documentation files (the "Software"), to deal  #
# in the Software without restriction, including without limitation the rights   #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      #
# copies of the Software, and to permit persons to whom the Software is          #
# furnished to do so, subject to the following conditions:                       #
#                                                                                #
# The above copyright notice and this permission notice shall be included in all #
# copies or substantial portions of the Software.                                #
#                                                                                #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  #
# SOFTWARE.                                                                      #
##################################################################################

cachedir="$HOME/.cache/dmenu-desktop-bash"
configdir="$HOME/.config/dmenu-desktop-bash"
lockfile="$cachedir/lock"
appcache="$cachedir/apps.csv"
aliasescache="$cachedir/aliases"
pathcache="$cachedir/path"
statusfile="$cachedir/changed"
aliasesfile="$configdir/aliases"
excludefile="$configdir/excludes"
configfile="$configdir/config"
appdirs=(
    "/usr/share/applications"
    "/usr/local/share/applications"
    "$HOME/.local/share/applications"
    "/var/lib/flatpak/exports/share/applications"
    "$HOME/.local/share/flatpak/exports/share/applications"
)

# check if desktop file caching is already running to prevent cache curruption
checkrunning()
{
    # 1 - cachedir
    # 2 - lockfile
    [[ ! -e "$1" ]] && mkdir "$1"
    if [[ -f "$2" ]]
    then
        notify "Already running!"
        echo "Already running!" >&2
        exit 1
    fi
}

# only send notification when command available
notify()
{
    # 1 - content of the notification
    command -v "notify-send" > /dev/null 2>&1 && notify-send -a "dmenu-desktop-bash" "$1"
}

# get name of an app from its .desktop file and check if it should be displayed
get_details()
{
    # 1 - .desktop file
    # 2 - language
    [[ -f "$1" ]] && entry=$(sed -n '/^\[Desktop Entry\]/,/^\[/p' "$1")
    if [[ -n $entry ]] && \
    ! grep -qP "^(NoDisplay|Hidden)=true$|^Type=(?!(Application$))" <<< "$entry"
    then
        # try to find name in system language,
        # if not found use default one
        name=$(sed 's/^.*=//' \
                <(grep "^Name\[$2\]=" <<< "$entry" || grep "^Name=" <<< "$entry"))
        [[ -n "$name" ]] && echo "$name,${1//*\/},$1,1"
    fi
    [[ -z "$name" ]] && echo "None,${1//*\/},$1,0"
}

# create or update the cache for one directory
update_cache()
{
    # 1 - appcache
    # 2 - last modification time of appcache
    # 3 - appdir
    # 4 - language
    # 5 - statusfile
    if [[ -d "$3" ]]
    then
        # check if cache exists
        if [[ -z "$2" ]]
        then
            echo "Name,ID,File,Show" > "$1"
            # add found files
            while read -r file
            do
                get_details "$file" "$4" >> "$1" &
                pids+=($!)
                    # input .desktop files
            done < <(find "$3" -type f,l -name "*.desktop")
            for pid in "${pids[@]}"
            do
                wait "$pid"
            done
            # create file to signify change
            ! [[ -f "$5" ]] && touch "$5"
        # check if there were any changes after last cache time
        elif find "$3" -newerct "$2" \( -type f,l -name "*.desktop" -o -type d \) | grep -q .
        then
            logfile="$cachedir/log"
            # remove removed files from cache
            while read -r file
            do
                name="$(grep "$file,1$" "$1" | sed 's/,.*//g; s/ (\([0-9]*\))$//g')"
                echo "remove $(awk -F "," '{print $2}' <(grep "$file,1$" "$1"))" >> "$logfile"
                sed -i "\|,$file,|d" "$1"
                # also remove all numbered versions to prevent missing numbers
                sed -i "s/^$name (\([0-9]*\)),/$name,/g" "$1"
                # same file as above
                ! [[ -f "$5" ]] && touch "$5"
                empty=false
                    # input files that are only in cache and not in dir
            done < <(comm -23 <(awk -F "," '{print $3}' "$1" | grep "$3" | sort -u) \
                                <(find "$3" -type f,l -name "*.desktop" | sort -u))
            # flatpaks symlinks are weird
            if [[ "$3" = *"flatpak"* ]]
            then
                updated=$( (comm -13 <(awk -F "," '{print $3}' "$1" | grep "$3" | sort -u) \
                                     <(find "$3" -type f,l -name "*.desktop" | sort -u) && \
                            find "$3" -newerct "$2" -type f,l -name "*.desktop") | awk '!seen[$0]++')
            else
                updated=$(find "$3" -newerct "$2" -type f,l -name "*.desktop")
            fi
            if [[ -n "$updated" ]]
            then
                # add/update new/changed files
                while read -r file
                do
                    # remove previous entry in case file only changed
                    sed -i "\|,$file,|d" "$1"
                    details=$(get_details "$file" "$4" | tee -a "$1")
                    name=$(awk -F "," '{ if ($3 == 1) {print $1} }' <<< "$details")
                    echo "add/update $(awk -F "," '{print $2}' <<< "$details")" >> "$logfile"
                    # remove all numbered versions to prevent dulicate numbers
                    sed -i "s/^$name (\([0-9]*\)),/$name,/g" "$1"
                    # same file as above
                    ! [[ -f "$5" ]] && touch "$5"
                    empty=false
                        # input files that were changed after last cache time
                done <<< "$updated"
            fi
            # update file to prevent repeated entering of the function
            # if no file but only a dir changed state
            $empty && sed -i '/^ *$/d' "$1" || echo -e "\n$2\n_______\n" >> "$logfile"
        fi
    fi
}

# list app names found in appdirs and build cache with details
get_apps()
{
    # 1 - appdirs: array
    # 2 - appcache
    # 3 - lockfile
    # 4 - statusfile - file to signify change
    # create lock file
    touch "$3"
    # get time of last cache modification to check for changes
    # is sadly very slow :(
    mtime=$(find "$2" -printf "%TY-%Tm-%Td %TH:%TM:%TS %Tz")
    # run the function in parallel for appdirs
    for dir in $1
    do
        update_cache "$2" "$mtime" "$dir" "${LANG//_*/}" "$4" &
        pids+=($!)
    done
    for pid in "${pids[@]}"
    do
        wait "$pid"
    done
    # check for duplicates and number them to prevent missing entries if cache changed
    [[ -f "$4" ]] && awk -i inplace -F "," '
    {
        count[$1]++
        count[$2]++
        if (count[$1] <= 1 || count[$2] > 1 || $1 == "None") {
            print $0
        } else {
            print $1 " (" count[$1]-1 ")," $2 "," $3 "," $4
        }
    }
    ' "$2" && rm "$4"
    # print resulting app list
    awk -F "," '{ if ($4 == 1) {print $1} }' "$2"
    # remove lockfile
    rm "$3"
}

# list the alias names from config file
get_aliases()
{
    # 1 - aliasesfile - user config
    # 2 - aliasescache
    if [[ -f "$1" ]]
    then
        if [[ "$1" -nt "$2" ]] || [[ ! -f "$2" ]]
        then
            grep "^alias .*=.*" "$1" | sed 's/alias //g; s/=.*$//g' > "$2"
        fi
        cat "$2"
    fi
}

# stolen from dmenu (modified) -> stest required
get_path()
{
    # 1 - pathcache
    IFS=:
    if ! [[ -f "$1" ]] || stest -dqr -n "$1" $PATH
    then
	    stest -flx $PATH | sort -u | tee "$1"
    fi
}

# execute a desktop file by extracting the info manually,
# because I didn't find a good solution to do this and it's fun;)
# while dex is the best one I found it has some bugs which make it not work
# with some apps on my system
execute_desktop()
{
    # 1 - .desktop file
    # 2 - terminal to be used
    entry=$(sed -n '/\[Desktop Entry\]/,/^\[/p' "$1")
    # get exec
    command=$(grep "^Exec=" <<< "$entry" | sed -r "s/^Exec=//g; s/ (%.( |$))*/ /g")
    # check if exec found
    if [[ -n "$command" ]]
    then
        # check if path specified
        if grep -q "^Path=.*" <<< "$entry"
        then
            path=$(grep "^Path=" <<< "$entry" | sed 's/^Path=//g')
            command="cd '$path' && $command"
        fi
        # check if it should be run in terminal
        if grep -q "^Terminal=true" <<< "$entry"
        then
            command="$2 -e ${SHELL:-"/bin/bash"} -c \"$command\""
        fi
        # execute the resulting command
        eval "$(printf '%b' "$command")" & # first execution location (.desktop file)
        disown $!
    # send error
    else
        notify "Invalid .desktop file"
    fi
}

# check if input is in cache and if true execute it
run_app()
{
    # 1 - name property of .desktop file
    # 2 - appcache
    # 3 - terminal to be used
    # check if input is in cache -> exists
    if [[ -f "$2" ]] && grep -q "^$1," <(tail +2 "$2")
    then
        # get and execute .desktop file
        file="$(grep "^$1," "$2" | awk -F "," '{print $3}' | sort | awk 'NR==1')"
        execute_desktop "$file" "$3"
        return
    else
        return 1
    fi
}

# excute the selected item
execute()
{
    # 1 - selected item to execute
    # 2 - appcache
    # 3 - aliases file - user config
    # 4 - terminal to be used
    # check if input is an alias and if run execute it
    if [[ -f "$2" ]] && grep -q "^alias $1=" "$3"
    then
        target=$(grep "^alias $1=" "$3" | sed "s/alias $1=//g")
        # check if it references a desktop entry
        if [[ "$target" =~ .*(; desktop)$ ]]
        then
            run_app "${target//; desktop/}" "$2" "$4" || \
                                notify "Invalid desktop alias"
        elif command -v "$(awk '{print $1}' <<< "$target")" > /dev/null 2>&1
        then
            eval "$target" & # second execution location (alias)
            disown $!
        else
            notify "Invalid alias"
        fi
        return
    # try desktop file
    else
        run_app "$1" "$2" "$4" && return
    fi
    # check if specified to run as command
    if [[ $1 =~ ^\*.* ]]
    then
        command=${1:1}
    else
        command=$1
    fi
    # check if input is an available command, ask for confirmation and run it
    if command -v "$(awk '{sub(/^~/,""); print $1}' <<< "$command")" > /dev/null 2>&1
    then
        # check if specified to run in terminal
        if [[ "$command" =~ ^~.* ]]
        then
            command="$4 -e ${SHELL:-"/bin/bash"} -c \"${command:1}\""
        fi
        eval "$command" & # third execution location (regular command)
        disown $!
    # send error
    else
        return 1
    fi
}

# remove excluded (excludefile) items from list
exclude()
{
    # 1 - excludefile - user config
    # 2 - entries
    list="$2"
    if [[ -f "$1" ]]
    then
        while read -r exclude
        do
            list=$(sed "/^$exclude$/d" <<< "$list")
        done < "$1"
    fi
    [[ -n "$list" ]] && echo "$list"
}

######################################### MAIN PART #########################################

checkrunning "$cachedir" "$lockfile"
# load variables from config file
[[ -f "$configfile" ]] && source "$configfile"
# check the arguments
for arg in "$@"
do
    case $arg in
    # print help and exit
    --help)
        printf '%s\n' "dmenu-desktop-bash by technicfan" \
            "licenced under MIT licence" \
            "https://github.com/Technicfan/dmenu-desktop-bash" "" \
            "--dmenu=<menu> - change menu command" \
            "--clean - clear cache and rebuild it" \
            "--benchmark - make menu command blank (eg. to test time)" \
            "--addpath - add items from path like dmenu (dmenu_path required)" \
            "--hidedesktop - disable .desktop files" "" \
            "When not using --dmenu= flag arguments are passed to regular dmenu"
        exit 0
        ;;
    # check if custom dmenu command given
    --dmenu=*)
        menu=${arg//--dmenu=/}
        m=1
        ;;
    # remove files from cachedir?
    --clean)
        rm "$aliasescache"
        rm "$appcache"
        ;;
    # notify the script that no menu command should be used?
    --benchmark)
        b=1
        ;;
    # check other config options in args
    --addpath)
        addpath=1
        ;;
    --hidedesktop)
        hidedesktop=1
        ;;
    --term=*)
        term=${arg//--term=/}
        ;;
    esac
done
# configure menu command to use if not already set by --dmenu= or --benchmark
if [[ $m != 1 && $b != 1 ]]
then
    menu="${menu:-"dmenu -i -p 'Run:'"} $(sed -r 's/--clean//; s/--addpath//;
                             s/--hidedesktop//; s/--term=.*( |$)//' <<< "$*")"
# don't need a menu command?
elif [[ $b = 1 ]]
then
    menu=""
fi
# check if menu command is available
if [[ -n "$menu" ]] && ! command -v "$(awk '{print $1}' <<< "$menu")" > /dev/null 2>&1
then
    notify "No valid menu command specified"
    exit 1
fi
# load the list of programs according to the config
echo -ne "looking for changes..."
if [[ $hidedesktop != 1 ]]
then
    entries=$(get_apps "${appdirs[*]}" "$appcache" \
              "$lockfile" "$statusfile" 2>/dev/null)
fi
# check if path should be added
if [[ $addpath = 1 ]]
then
    # check if it is possible
    if command -v "stest" > /dev/null 2>&1
    then
        if [[ -n "$entries" ]]
        then
            entries+=$(echo && get_path "$pathcache" 2>/dev/null)
        else
            entries+=$(get_path "$pathcache" 2>/dev/null)
        fi
    # prompt the user to make stest available
    else
        notify "Install dmenu (stest) to add items from PATH"
    fi
fi
echo -ne "\r\033[K"
# print info about read and found .desktop files/apps
[[ $hidedesktop != 1 ]] && echo "Read $(wc -l < "$appcache") .desktop files," \
                                "found $(wc -l < <(grep ",1$" "$appcache")) apps." &
# print apps/programs in menu system and get selection
selection=$( (get_aliases "$aliasesfile" "$aliasescache" & \
              exclude "$excludefile" "$entries") | \
              sort -u | eval "$menu")
# if anything selected, execute it
if [[ -n "$selection" ]] 
then
    # set term variable
    [ -z "$term" ] && term=kitty
    if ! command -v "$term" >/dev/null 2>&1
    then
        term=xterm
    fi
    # call execute function
    execute "$selection" "$appcache" "$aliasesfile" "$term" || \
        ( notify "\"$selection\" is not a valid command" && $0 "$*" & )
fi

#############################################################################################
